1.
a)
int main()
{
    int arr[3] = { 5, 10, 15 };
    int* ptr = arr;

    *ptr = 30;          // set arr[0] to 30
    *(ptr + 1) = 20;      // set arr[1] to 20
    arr[2] = 10;        // set arr[2] to 10

    while (ptr <= (arr + 2))
    {
        cout << *ptr << endl;    // print values
        ptr++;
    }
}

b)
The problem with the findMax function is that it never modifies the original ptr variable. Changing the parameter to a reference solves this issue.
void findMax(int arr[], int n, int* &pToMax) // call pToMax as a reference to a pointer in order to modify the original value in main().
{
    if (n <= 0) 
        return;      // no items, no maximum!
        
    pToMax = arr;

    for (int i = 1; i < n; i++)
    {
        if (arr[i] > *pToMax)
            pToMax = arr + i;
    }
}       
c)
The current main routine does not work because the initialized pointer is not pointing to any specific memory location.
This problem can be rectified by creating a new variable and setting the pointer equal to the reference of that varible.

int main() {
 	int x; // initialize a variable
	int* ptr = &x; // generate a pointer to x and set the pointer equal to that reference.
    computeCube(5, ptr);
    cout << "Five cubed is " << *ptr << endl;
}

d)
The issue in this example was that the code was trying to compare two cstrings using the == and != operators.
This is not correct, the below solution uses the * operator to access the character at the specific memory location indicated.
*str returns the first character of the cstring as does *(&str[0]), until str++ advances to the next character.
bool strequal(const char str1[], const char str2[])
{
    while (*str1 != 0  &&  *str2 != 0)  // change str1 and str2 to *str1 and *str2
    {
        if (*str1 != *str2)  // change str1 and str2 to *str1 and *str2
            return false;
        str1++;            // advance to the next character
        str2++;
    }
    return (*str1 == *str2);   // change str1 and str2 to *str1 and *str2
}

e) the function nochange is taking in a pointer to an array as a parameter, then returning it.
This is invalid because an array declared inside a function is not accessible outside that function,
so when main() tries to access the values inside that array, wacky numbers appear.

2
a) double* cat;
b) double mouse[5];
c) cat = &mouse[4];
d) *cat = 25;
e) *(mouse + 3) = 54;
f) cat -= 3;
g) cat[1] = 42;
h) cat[0] = 17;
i) bool d = (*cat == mouse[0]);
j) bool b = (*cat == *(cat + 1));

3
a)
double mean(const double* scores, int numScores)
{
    double tot = 0;
    int i = 0;
    while (i != numScores)
    {
        tot += *(scores + i);
        i++;
    }
    return tot/numScores;
}

b)
const char* findTheChar(const char* str, char chr)
{
    for (int k = 0; *(str + k) != 0; k++)
        if (*(str + k) == chr)
            return (str + k);

    return nullptr;
}

c)
const char* findTheChar(const char* str, char chr)
{
    for (;*str != 0; str++)
        if (*str == chr)
            return str;

    return nullptr;
}

4

FINAL OUTPUT:
3
4 
79
-1
9
22
19

CODE + REASONING:
#include <iostream>
using namespace std;


// given two pointers, this function returns whichever pointer points to a greater value.
int* maxwell(int* a, int* b)
{
    if (*a > *b)
        return a;
    else
        return b;
}

// this function pointer a point to b, and pointer b point to a.
void swap1(int* a, int* b)
{
    int* temp = a;
    a = b;
    b = temp;
}

void swap2(int* a, int* b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
}

int main()
{
    int array[6] = { 5, 3, 4, 17, 22, 19 };

    int* ptr = maxwell(array, &array[2]); // returns a pointer to array[0], because 5 is greater than 4 (*(array) > *(&array[2]))
    //cout << *ptr << endl;
    *ptr = -1; // *ptr pointed to array[0], which was equal to 5. Now array[0] is equal to -1.
    ptr += 2; // move the pointer ahead 2 spaces, so now the pointer points to array[2], which is 4
    ptr[1] = 9; // pointer is currently 2, ptr[1] points to array[2+1]. array[3] was 17, but it is now 9.
    *(array+1) = 79; // array[1] is now 79.

    // current array: {-1, 79, 4, 9, 22, 19}
    // pointer is currently 2

    cout << &array[5] - ptr << endl; // ptr currently points to array[2], so ptr is equal to &array[2].
    // there are 3 memory locations between &array[5] and &array[2], so &array[5] - &array[2] equals 3.

    // FIRST LINE OF OUTPUT IS 3

    swap1(&array[0], &array[1]); // this generates two pointers, one to array[0] and one to array[1], but no values of array are changed inside swap1()
    swap2(array, &array[2]); // this sets the value inside array[0] to array[2], and the value inside array[2] to array[0].
    // array was: {-1, 79, 4, 9, 22, 19}
    // array now is: {4, 79, -1, 9, 22, 19}


    for (int i = 0; i < 6; i++)
        cout << array[i] << endl;// cout 4, then 79, then -1, then 9, then 22, then 19.
}

5
void removeS(char* cstring) {
    char* ptr = cstring;
    while (*cstring != 0) {
        if (*cstring != 's' && *cstring != 'S') {
            *ptr = *cstring;
            ptr++;
        }
        cstring++;
    *ptr = 0;
    }
}